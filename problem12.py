""" 
The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred 
divisors?
"""
import numpy as np

def triangleDivisor(lim, target):
    """function to find the first triangle number with more than target
    divisors. Looking in the first lim triangle numbers.

    Looks for all divisors for each triangle number, n, up until sqrt(n)
    because the divisors will come in pairs ie for 36:
    1, 36
    2, 18
    3, 12
    4, 9
    6

    Args:
        lim (int): the upper bound in the triangle number sequence
        target (int): the desired number of divisors for the triangle number

    Returns:
        int: the triangle number with more than target divisors.
        Returns 'None' if no triangle number in the lim range has more than
        target divisors.
    """
    elementi = 0
    for i in range(1,lim+1):
        elementi += i
        count = 0
        for j in range(1, int(np.sqrt(elementi))+1):
            if elementi%j == 0:
                if j*j == elementi:
                    count += 1
                else:
                    count += 2
            if count > target:
                return elementi
    return 'None'

print(triangleDivisor(100000, 500))






